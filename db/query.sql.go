// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const createBook = `-- name: CreateBook :one
INSERT INTO book (
  name
) VALUES (
  $1
)
RETURNING id, name, created_at
`

func (q *Queries) CreateBook(ctx context.Context, name string) (Book, error) {
	row := q.db.QueryRowContext(ctx, createBook, name)
	var i Book
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const createEntry = `-- name: CreateEntry :one
INSERT INTO entry (
  book_id, type, content, key
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, book_id, content, type, key, created_at
`

type CreateEntryParams struct {
	BookID  int32
	Type    string
	Content string
	Key     sql.NullString
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, createEntry,
		arg.BookID,
		arg.Type,
		arg.Content,
		arg.Key,
	)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.Content,
		&i.Type,
		&i.Key,
		&i.CreatedAt,
	)
	return i, err
}

const deleteEntry = `-- name: DeleteEntry :exec
DELETE FROM entry
WHERE id = $1 AND book_id = $2
`

type DeleteEntryParams struct {
	ID     int32
	BookID int32
}

func (q *Queries) DeleteEntry(ctx context.Context, arg DeleteEntryParams) error {
	_, err := q.db.ExecContext(ctx, deleteEntry, arg.ID, arg.BookID)
	return err
}

const getBook = `-- name: GetBook :one
SELECT id, name, created_at FROM book
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBook(ctx context.Context, id int32) (Book, error) {
	row := q.db.QueryRowContext(ctx, getBook, id)
	var i Book
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const getBooks = `-- name: GetBooks :many
SELECT id, name, created_at FROM book
ORDER BY created_at DESC
`

func (q *Queries) GetBooks(ctx context.Context) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, getBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEntriesByBook = `-- name: GetEntriesByBook :many
SELECT id, book_id, content, type, key, created_at FROM entry
WHERE book_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetEntriesByBook(ctx context.Context, bookID int32) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, getEntriesByBook, bookID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entry
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.BookID,
			&i.Content,
			&i.Type,
			&i.Key,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
